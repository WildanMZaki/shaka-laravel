<?php

namespace App\Helpers;

class MuwizaTable extends Muwiza
{
    private $rowsData = [];
    private $resultData = [];

    public static $btnsDefault = [
        'edit' => [
            'selector' => 'btn-edit',
            'data' => [],
            'classColor' => 'btn-label-warning',
            'classIcon' => 'ti ti-pencil',
            'textColor' => 'text-warning',
            'tooltip' => 'Edit'
        ],
        'detail' => [
            'selector' => 'btn-detail',
            'data' => [],
            'classColor' => 'btn-label-info',
            'classIcon' => 'ti ti-list-details',
            'textColor' => 'text-info',
            'tooltip' => 'Detail'
        ],
        'delete' => [
            'selector' => 'btn-delete',
            'data' => [],
            'classColor' => 'btn-label-danger',
            'classIcon' => 'ti ti-trash',
            'textColor' => 'text-danger',
            'tooltip' => 'Hapus'
        ],
        'activate' => [
            'selector' => 'btn-active-control',
            'data' => [],
            'classColor' => 'btn-label-success',
            'textColor' => 'text-success',
            'tooltip' => 'Aktifkan'
        ],
        'inactivate' => [
            'selector' => 'btn-active-control',
            'data' => [],
            'classColor' => 'btn-label-danger',
            'textColor' => 'text-danger',
            'tooltip' => 'Nonaktifkan'
        ],
    ];

    public static function generate($rowsData, ?callable $basicProcess = null)
    {
        $instance = new self();
        $instance->rowsData = $rowsData;

        foreach ($instance->rowsData as $row) {
            $instance->resultData[]['id'] = $row->id;
        }

        // Basic processing if callback is provided
        if ($basicProcess !== null) {
            // Note: rows yang dihasilkan $basicProcess itu harus seperti:
            /**
             * $col = ['merk' => 'Some Merk', 'other' => 'Other Value'];
             */
            foreach ($instance->rowsData as $i => $row) {
                $basicProcessResult = $basicProcess($row);
                $cols = array_keys($basicProcessResult);
                foreach ($cols as $col) {
                    $instance->resultData[$i][$col] = $basicProcessResult[$col];
                }
            }
        }

        return $instance;
    }

    public function col($columnName, $format, ?callable $callback = null)
    {
        foreach ($this->rowsData as $i => $row) {
            if (is_string($format)) {
                $this->rowsData[$i]->$columnName = static::$format($row->$columnName);

                $res = ($callback != null) ? $callback($row) : $this->rowsData[$i]->$columnName;
            } else {
                $res = $format($row);
            }
            $this->resultData[$i][$columnName] = $res;
        }

        return $this;
    }

    public static function formatDefaultActionBtn($config)
    {
        // Default values
        $defaultConfig = [
            'data' => [],               // Default: []
            'url' => 'javascript:void(0)',  // Default: javascript:void(0)
            'tooltip' => null,           // Default: null
            'tooltipPlacement' => 'top',           // Default: 'top'
            'classColor' => 'btn-label-primary',  // Default: btn-label-primary
            'textColor' => 'text-primary',  // Default: text-primary
            'classIcon' => 'ti ti-pencil',       // Default: ti ti-pencil
            'selector' => 'is-btn',       // Default: ti ti-pencil
        ];

        // Merge the provided config with the default config
        $config = array_merge($defaultConfig, $config);

        // Extract variables from config
        $data = $config['data'];
        $url = $config['url'];
        $tooltip = $config['tooltip'];
        $tooltipPlacement = $config['tooltipPlacement'];
        $classColor = $config['classColor'];
        $textColor = $config['textColor'];
        $classIcon = $config['classIcon'];
        $selector = $config['selector'];

        $dataSyntax = '';
        if (!empty($data) && is_array($data)) {
            $keys = array_keys($data);
            foreach ($keys as $key) {
                $dataSyntax .= "data-$key='{$data[$key]}' ";
            }
        }

        $tooltipSyntax = "";
        if ($tooltip) {
            $tooltipSyntax .= "data-bs-toggle='tooltip' data-bs-placement='{$tooltipPlacement}' title='{$tooltip}'";
        }

        return "<a class='btn btn-icon $classColor $textColor rounded-2 me-1 $selector' href='$url' $dataSyntax $tooltipSyntax><i class='ti $classIcon m-0'></i></a>";
    }

    /**
     * @return string HTML Format
     */
    public static function generateActions($btns)
    {
        $btnsResult = '';
        foreach ($btns as $btn) {
            $btnsResult .= self::formatDefaultActionBtn($btn);
        }
        return $btnsResult;
    }

    public function actions(string|callable $actionColumn = 'actions', ?callable $callback = null)
    {
        // Note penting: result dari callback itu harus array of btns dengan format seperti di atas
        foreach ($this->rowsData as $i => $row) {
            if (!is_string($actionColumn)) {
                $trueActionColumn = 'actions';
                $btns = $actionColumn($row);
            } else {
                $trueActionColumn = $actionColumn;
                $btns = $callback($row);
            }

            $this->resultData[$i][$trueActionColumn] = $this::generateActions($btns);
        }
        return $this;
    }

    public function result()
    {
        return $this->resultData;
    }
}
